/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bmiller <marvin@42.fr>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/01/16 17:02:28 by bmiller           #+#    #+#             */
/*   Updated: 2017/01/16 19:37:32 by bmiller          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"
#include <unistd.h>
/*
static memjoin(void *m1, void *m2)
{
  // to be implemented
}

static memdup(void *m1, void *m2, size_t n)
{
  // to be implemented
}
*/
static t_list	*rest_fd(const int fd, t_list *list)
{
	t_list	*lst;

	if (!list)
	{
		lst = ft_lstnew("", fd);
		ft_lstadd(&list, lst);
		lst = list;
		return (lst);
	}
	lst = list;
	if ((int)lst->content_size == fd)
		return (lst);
	return (rest_fd(fd, lst->next));
}

int				get_next_line(const int fd, char **line)
{
	char				buff[BUFF_SIZE + 1];
	int					bytes_read;
	char				*next;
	static t_list		*list;
	t_list				*lst;

	if ((!line || fd < 0 || read(fd, buff, 0) < 0 || \
	     !(*line = ft_strnew(1))))
		return (-1);
	lst = rest_fd(fd, list);
	while ((bytes_read = read(fd, buff, BUFF_SIZE)))
	{
		buff[bytes_read] = 0;
		if (!(lst->content = ft_strjoin(lst->content, buff)))
			return (-1);
		if ((next = (char*)ft_memchr(buff, '\n', BUFF_SIZE)))
			break;
		else
			next = NULL;
	}
	if ((lst->content == NULL) && (bytes_read < BUFF_SIZE))
		return (0);
	if (next != NULL)
		ft_memccpy(*line, lst->content, '\n', next - buff - 1);
	else
		ft_memccpy(*line, lst->content, '\n', 5000);
//	if (next && sizeof(next) < (int)sizeof(lst->content) && lst->content != NULL)
//		lst->content += sizeof(next);
//	ft_memdel(&(list->content));
	return (1);
}
